namespace Sup {
  const tmpVector3 = new SupEngine.THREE.Vector3();
  const tmpQuaternion = new SupEngine.THREE.Quaternion();

  export class Scene extends Asset {}

  export function loadScene(pathOrAsset) {
    player.gameInstance.destroyAllActors();
    appendSceneInternal(pathOrAsset);
  }
  
  export function appendScene(pathOrAsset: string|Scene, parent?: Actor) {
    return appendSceneInternal(pathOrAsset, parent);
  }

  function appendSceneInternal(pathOrAsset: string|Scene, rootParentActor?: Actor, prefabNode?: any): any {
    const sceneAsset = (typeof pathOrAsset === "string") ? get(pathOrAsset, Scene) : pathOrAsset as Scene;

    const actors: Actor[] = [];
    let allComponents = [];

    const walk = (node, parentActor) => {
      let actor: Actor;
      if (node.prefab != null) {
        const prefabAsset = player.getOuterAsset(node.prefab.sceneAssetId);
        if (prefabAsset != null) {
          const result = appendSceneInternal(prefabAsset, parentActor, node);
          actor = result.actors[0];
          allComponents = allComponents.concat(result.allComponents);
        } else throw new Error(`The prefab "${node.name}" in scene "${sceneAsset.name} has no scene defined.`);
      } else {
        actor = player.createActor(node.name, parentActor, { visible: node.visible, layer: node.layer });

        if (prefabNode != null && parentActor === rootParentActor) {
          actor.__inner.name = prefabNode.name;
          actor.__inner.threeObject.visible = prefabNode.visible;

          tmpVector3.set(node.position.x, node.position.y, node.position.z).add(prefabNode.position);
          actor.__inner.setLocalPosition(tmpVector3);

          const localOrientation = new SupEngine.THREE.Quaternion(node.orientation.x, node.orientation.y, node.orientation.z, node.orientation.w);
          tmpQuaternion.set(prefabNode.orientation.x, prefabNode.orientation.y, prefabNode.orientation.z, prefabNode.orientation.w);
          actor.__inner.setLocalOrientation(tmpQuaternion.multiply(localOrientation));

          tmpVector3.set(node.scale.x, node.scale.y, node.scale.z).multiply(prefabNode.scale);
          actor.__inner.setLocalScale(tmpVector3);
        } else {
          actor.__inner.setLocalPosition(tmpVector3.set(node.position.x, node.position.y, node.position.z));
          actor.__inner.setLocalOrientation(tmpQuaternion.set(node.orientation.x, node.orientation.y, node.orientation.z, node.orientation.w));
          actor.__inner.setLocalScale(tmpVector3.set(node.scale.x, node.scale.y, node.scale.z));
        }

        node.components.forEach((sceneComponent) => {
          allComponents.push({
            sceneComponent: sceneComponent,
            actorComponent: player.createComponent(sceneComponent.type, actor, sceneComponent.config)
          });
        });

        actor.__inner.awoken = false;
        node.children.forEach((child) => { walk(child, actor); });
      }

      return actor;
    }
    sceneAsset.__inner.nodes.forEach((node) => { actors.push(walk(node, rootParentActor)); });

    if (prefabNode != null) return { actors, allComponents };

    allComponents.forEach((x) => {
      SupRuntime.plugins[x.sceneComponent.type].setupComponent(player, x.actorComponent.__inner, x.sceneComponent.config);
    });

    const awakeActor = (actor) => {
      if (actor.__inner.awoken) return;

      actor.__inner.awoken = true;
      actor.__inner.awake();
      actor.getChildren().forEach((child) => { awakeActor(child); });
    }
    actors.forEach((actor) => { awakeActor(actor); });
    return actors;
  }
}