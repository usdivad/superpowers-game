namespace Sup {
  export class Light extends Sup.ActorComponent {
    type: Light.Type;

    constructor(actor, options) {
      super(actor);
      this.__inner = new SupEngine.componentClasses.Light(this.actor.__inner);
      this.__inner.__outer = this;
      this.actor.light = this;

      if (options == null) return;
      this.type = options.type;
      let types = ["ambient", "point", "spot", "directional"];
      this.__inner.setType(types[this.type]);
      this.__inner.setColor(options.color.getHex());
      if (options.intensity != null) this.__inner.setIntensity(options.intensity);
      if (options.distance != null) this.__inner.setDistance(options.distance);
      if (options.angle != null) this.__inner.setAngle(options.angle);
      if (options.target != null) this.__inner.setTarget(options.target.x, options.target.y, options.target.z);
      if (options.castShadow != null) this.__inner.setCastShadow(options.castShadow);
    }
    destroy() {
      this.actor.light = null;
      super.destroy();
    }

    getType() { return this.type; }
    setColor(color) { this.__inner.setColor(color.getHex()); return this; }
    getColor() { return new Color(1, 1, 1).setHex(this.__inner.color); }
    setIntensity(intensity) { this.__inner.setIntensity(intensity); return this; }
    getIntensity() { return this.__inner.intensity; }
    setDistance(distance) { this.__inner.setDistance(distance); return this; }
    getDistance() { return this.__inner.distance; }
    setAngle(angle) { this.__inner.setAngle(angle); return this; }
    getAngle() { return this.__inner.angle; }
    setTarget(target) { this.__inner.setTarget(target.x, target.y, target.z); return this; }
    getTarget() { return new Math.Vector3(this.__inner.target.x, this.__inner.target.y, this.__inner.target.z); }
    setCastShadow(castShadow) { this.__inner.setCastShadow(castShadow); return this; }
    getCastShadow() { return this.__inner.castShadow; }
  }

  export namespace Light {
    export enum Type { Ambient, Point, Spot, Directional };
  }
}
