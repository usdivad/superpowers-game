/*
 * A music conductor that schedules audio events, in the form of MultiSoundPlayers,
 * based on beats per phrase according to an internal metronome/interval that
 * uses the Web Audio API's clock for timing.
 *
 */

declare namespace Sup {
    namespace Audio {
        class Conductor {

            // Construct a Conductor.
            //
            // - bpm -> beats per minute
            // - timesig -> time signature (how many beats in a cycle,
            //              i.e. num of beats * num of measures)
            // - players -> an object with player names as keys and MultiSoundPlayers as values,
            //              e.g. {"violin": MultiSoundPlayer, "piano": MultiSoundPlayer}
            constructor(bpm: number, timesig: number, players: any);
            
            // Initialize Conductor's members via a params object
            initializeParams(params: {bpm: number, timesig: number, players: any});
            
            // Start the Conductor's interval and player scheduling
            start();
            // Stop the Conductor and reset params for next start()
            stop();

            // Have all players play init sample if !initPlayed, otherwise loop sample
            playAllInitOrLoop();
            // Have all players play tail samples for Conductor's current beatNum
            playAllTails();

            // Return a player
            getPlayer(playerName: string): MultiSoundPlayer;
            // Call reset() on all players
            resetAllPlayers();
            
            // Set the params that Conductor will be reinitialized with for next section
            setNextParams(params: {bpm: number, timesig: number, players: any});
            // Set whether Conductor should transition upon next available beat
            setTransition(transition: boolean);
            // Set whether Conductor should go to next section at the next available transition
            // (if false, Conductor will call stop() upon transitioning)
            setToNext(toNext: boolean);
            // Get whether Conductor is transitioning
            isTransitioning(): boolean;
            
            // Activate or deactivate a player
            activatePlayer(playerName: string);
            deactivatePlayer(playerName: string);

            // Activate or deactivate multiple players
            activatePlayers(playerNames: Array<string>);
            deactivatePlayers(playerNames: Array<string>);

            // Activate or deactivate all players
            activateAllPlayers();
            deactivateAllPlayers();

            // Fade a single player, multiple players, or all players
            fadePlayer(playerName: string, targetVolume: number, fadeLength: number /* in ms */);
            fadePlayers(playerNames: Array<string>, targetVolume: number, fadeLength: number);
            fadeAllPlayers(targetVolume: number, fadeLength: number);

            // Get the current beat number
            getBeatNum(): number;
            // Update the next beat's time based on the latest beat time and BPM
            updateNextBeatTime();
            // Return time, in seconds, until the next downbeat
            // ("downbeat" refers to when beatNum==0)
            getSecondsLeftUntilNextDownbeat(bpmIn?: number): number;
            // Return time, in milliseconds, until the next downbeat
            getMillisecondsLeftUntilNextDownbeat(bpm?: number): number;
            // Return time, in milliseconds, until the next available transition beat
            getMillisecondsLeftUntilNextTransitionBeat(): number;

            // Return the Conductor's BPM
            getBpm(): number;
            // Return the Conductor's AudioContext
            getContext(): any;

            // Schedule an event to occur a certain number of milliseconds in the future
            scheduleEvent(msFromNow: number, event: any);

            // Set console logging on/off
            setLogOutput(logOutput: boolean);
            // Log to console if logOutput is true
            log(message?: any);
        }

        namespace Conductor {
            // Return the next beat time (in seconds)
            function calculateNextBeatTime(currentBeatTime: number, bpm: number): number;
        }
    }
}