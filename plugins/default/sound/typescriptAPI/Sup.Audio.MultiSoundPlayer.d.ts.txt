/*
 * A music player, comprised of multiple SoundPlayers, that provides methods for
 * smoother and more robust game audio in the form of an "init, loop, tail(s)"
 * scheme, allowing for looped sections of varying repetitions to begin and end
 * seamlessly.
 *
 */

declare namespace Sup {
    namespace Audio {
        class MultiSoundPlayer {

            // Construct a MultiSoundPlayer.
            // 
            // init -> sample for the first time the MultiSoundPlayer is played
            // loop -> sample for all subsequent repeats
            // tails -> sample(s) to play when looping is done
            // 
            // If tails is a string, then the single tail sample will be played for any
            // transition, regardless of beat number.
            // 
            // If tails is an object, it should have beat numbers as keys and
            // sample paths as values, such as {0: "path/to/tail0.mp3", 6: "path/to/tail6.mp3"}
            // In that case, a tail corresponding to a beat number will only be played when
            // transitioning on that exact beat.
            constructor(init: string | Sound, loop: string | Sound, tails: any /*object or string*/, volume: number /*1.0*/, options?:  { loop?: boolean; pitch?: number; pan?: number; active?: boolean; logOutput?: boolean;});
            
            // Play init or loop sample (depending on whether init has already been played)
            playInitOrLoop(beatNum: number);
            // Play tail sample for a given beat number
            playTail(beatNum: number /*0*/);
            // Set the play mode to "init", "loop", or "tail"
            setPlayMode(playMode: string);
            
            // Activate a player so that it will play when called on
            activate();
            // Deactivate a player so that it doesn't play
            deactivate();
            // Reset the player and the values of its members
            reset();

            // Get or set the volume of the player
            getVolume(): number;
            setVolume(volume: number);

            // Increment the player's volume up or down, over a given amount of time,
            // until it reaches the target volume
            fade(targetVolume: number, fadeLength: number /* in ms */);

            // Set console logging on/off
            setLogOutput(logOutput: boolean);
            // Log to console if logOutput is true
            log(message?: any);
        }
    }
}