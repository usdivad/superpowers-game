declare namespace Sup {
  namespace Math {
    function clamp(v: number, min: number, max: number): number;

    function lerp(a: number, b: number, v: number): number;
    function lerpAngle(a: number, b: number, v: number): number;
    function wrapAngle(a);

    namespace Random {
      function integer(min: number, max: number): number;
      function float(min: number, max: number): number;
      function sample<T>(collection: T[]): T;
    }

    function toRadians(degrees: number): number;
    function toDegrees(radians: number): number;

    interface XY {
      x: number;
      y: number;
    }

    class Vector2 {
      static right(): Vector2;
      static left(): Vector2;
      static up(): Vector2;
      static down(): Vector2;

      x: number;
      y: number;

      constructor();
      constructor(x: number, y: number);
      constructor(xy: number);
      set(x: number, y: number): Vector2;
      set(xy: number): Vector2;
      copy(v: XY): Vector2;
      clone(): Vector2;

      add(vector: XY): Vector2;
      add(x: number, y: number): Vector2;
      subtract(vector: XY): Vector2;
      subtract(x: number, y: number): Vector2;
      multiplyScalar(multiplier: number): Vector2;
      dot(vector: XY): number;
      normalize(): Vector2;
      negate(): Vector2;
      lerp(vector: XY, t: number): Vector2;
      rotate(angle: number): Vector2;
      length(): number;
      distanceTo(vector: XY): number;
      angleTo(vector: XY): number;
      unproject(camera: Camera): Vector3;
      angle(): number;
      setFromAngle(angle: number): Vector2;
      toVector3(): Vector3;
    }

    interface XYZ {
      x: number;
      y: number;
      z: number;
    }

    class Vector3 {
      static forward(): Vector3;
      static back(): Vector3;
      static right(): Vector3;
      static left(): Vector3;
      static up(): Vector3;
      static down(): Vector3;

      x: number;
      y: number;
      z: number;

      constructor();
      constructor(x: number, y: number, z: number);
      constructor(xyz: number);
      set(x: number, y: number, z: number): Vector3;
      set(xyz: number): Vector3;
      copy(vector: XYZ): Vector3;
      clone(): Vector3;

      add(vector: XYZ): Vector3;
      add(x: number, y: number, z: number): Vector3;
      subtract(vector: XYZ): Vector3;
      subtract(x: number, y: number, z: number): Vector3;
      multiplyScalar(multiplier: number): Vector3;
      cross(vector: XYZ): Vector3;
      dot(vector: XYZ): number;
      normalize(): Vector3;
      negate(): Vector3;
      lerp(vector: XYZ, t: number): Vector3;
      rotate(orientation : Quaternion): Vector3;
      length(): number;
      distanceTo(vector: XYZ): number;
      angleTo(vector: XYZ): number;
      unproject(camera: Camera): Vector3;
      toVector2(): Vector2;
    }

    class Quaternion {
      x: number;
      y: number;
      z: number;
      w: number;

      constructor(x?: number, y?: number, z?: number, w?: number);

      set(x: number, y: number, z: number, w: number): Quaternion;
      setFromAxisAngle(axis: XYZ, angle: number): Quaternion;
      setFromYawPitchRoll(yaw: number, pitch: number, roll: number): Quaternion;
      copy(q: Quaternion): Quaternion;
      clone(): Quaternion;

      multiplyQuaternions(a: Quaternion, b: Quaternion): Quaternion;
      multiply(q: Quaternion): Quaternion;
      slerp(q: Quaternion, t: number): Quaternion;
    }

    class Plane {
      constructor();
      constructor(normal: XYZ, distance: number);

      setFromDistance(normal: XYZ, distance: number): Plane;
      setFromPoint(normal: XYZ, point: XYZ): Plane;

      getNormal(): Vector3;
      getDistance(): number;

      distanceToPoint(point: XYZ): number;
      projectPoint(point: XYZ): Vector3;
    }

    interface ActorRaycastHit {
      actor: Sup.Actor;
      distance: number;
      point: Vector3;
      normal: Vector3;
    }

    class Ray {
      constructor(origin?: XYZ, direction?: XYZ);

      setOrigin(origin: XYZ): Ray;
      setOrigin(x: number, y: number, z: number): Ray;
      getOrigin(): Vector3;

      setDirection(direction: XYZ): Ray;
      setDirection(x: number, y: number, z: number): Ray;
      getDirection(): Vector3;

      setFromCamera(camera: Sup.Camera, screenPosition: XY): Ray;

      intersectActor(actor: Sup.Actor, recursive?: boolean): ActorRaycastHit[];
      intersectActors(actors: Sup.Actor[]): ActorRaycastHit[];
      intersectPlane(plane: Plane): { distance: number; point: Vector3; };
    }

    interface Raycast2DHit {
      distance: number;
      point: Vector2;
    }

    class Ray2D {
      constructor(origin?: XY, direction?: XY);

      setOrigin(origin: XY): Ray2D;
      setOrigin(x: number, y: number): Ray2D;
      getOrigin(): Vector2;

      setDirection(direction: XY): Ray2D;
      setDirection(x: number, y: number): Ray2D;
      getDirection(): Vector2;

      intersectCircle(position: XY, radius: number): Raycast2DHit;
      intersectRectangle(position: XY, size: { width: number; height: number; }, angle: number): Raycast2DHit;
      intersectSpriteRenderer(spriteRenderer: Sup.SpriteRenderer): Raycast2DHit;
      intersectTileMapRenderer(tileMapRenderer: Sup.TileMapRenderer, options?: { layers?: number[]; tileSetPropertyName?: string }): { distance: number; point: Vector2; block: Vector2; };
    }
  }
}
