namespace Sup {
  export class Color {
    r: number;
    g: number;
    b: number;

    constructor(r, g, b) {
      if (g == null && b == null) this.setHex(r);
      else this.setRGB(r, g, b);
    }

    setRGB(r: number, g: number, b: number) {
      this.r = r;
      this.g = g;
      this.b = b;
      return this;
    }

    setHex(hex: number) {
      this.r = (hex >> 16 & 255) / 255;
  		this.g = (hex >> 8 & 255) / 255;
  		this.b = (hex & 255) / 255;
      return this;
    }
    getHex() {
      return (this.r * 255) << 16 ^ (this.g * 255) << 8 ^ (this.b * 255) << 0;
    }
    getHexString() {
      return ('000000' + this.getHex().toString(16)).slice(- 6);
    }

    setHSL(h: number, s: number, l: number) {
      if (s === 0) this.r = this.g = this.b = l;
      else {
  			let hue2rgb = (p, q, t) => {

  				if (t < 0) t += 1;
  				if (t > 1) t -= 1;
  				if (t < 1 / 6) return p + (q - p) * 6 * t;
  				if (t < 1 / 2) return q;
  				if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
  				return p;

  			};

  			let p = l <= 0.5 ? l * (1 + s) : l + s - (l * s);
  			let q = (2 * l) - p;

  			this.r = hue2rgb(q, p, h + 1 / 3);
  			this.g = hue2rgb(q, p, h);
  			this.b = hue2rgb(q, p, h - 1 / 3);

  		}
      return this;
    }
    getHSL() {
  		let max = window.Math.max(this.r, this.g, this.b);
  		let min = window.Math.min(this.r, this.g, this.b);

  		let h = 0
      let s = 0;
  		let l = (min + max) / 2.0;

  		if (min !== max) {
  			let delta = max - min;

  			s = l <= 0.5 ? delta / (max + min) : delta / (2 - max - min);

  			switch (max) {
  				case this.r: h = (this.g - this.b) / delta + (this.g < this.b ? 6 : 0); break;
  				case this.g: h = (this.b - this.r) / delta + 2; break;
  				case this.b: h = (this.r - this.g) / delta + 4; break;
  			}

  			h /= 6;
  		}
  		return { h, s, l };
    }
  }
}
