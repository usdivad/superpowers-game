namespace Sup {
  export class TileMap extends Asset {
    getWidth() { return this.__inner.getWidth(); }
    getHeight() { return this.__inner.getHeight(); }
    getPixelsPerUnit() { return this.__inner.getPixelsPerUnit(); }
    getLayerCount() { return this.__inner.data.layers.length; }

    setTileAt(layer, x, y, value, flipX, flipY, angle) {
      let tileSet = player.getOuterAsset(this.__inner.data.tileSetId);
      let tilesPerRow = tileSet.__inner.data.texture.image.width / tileSet.__inner.data.grid.width;
      if (value == -1) this.__inner.setTileAt(layer, x, y, 0);
      else {
        flipX = (flipX) ? flipX : false;
        flipY = (flipY) ? flipY : false;
        angle = (angle) ? angle : 0;
        this.__inner.setTileAt(layer, x, y, [value % tilesPerRow, window.Math.floor(value / tilesPerRow), flipX, flipY, angle]);
      }
      return this;
    }
    getTileAt(layer, x, y) {
      let tileSet = player.getOuterAsset(this.__inner.data.tileSetId);
      let tilesPerRow = tileSet.__inner.data.texture.image.width / tileSet.__inner.data.grid.width;
      let tilesPerColumn = tileSet.__inner.data.texture.image.height / tileSet.__inner.data.grid.height;
      let transform = this.__inner.getTileAt(layer, x, y);
      if (transform === 0) return -1;

      let tileX = transform[0]; let tileY = transform[1];
      if (tileX === -1 || tileY === -1 || tileY >= tilesPerColumn ||
      (tileX === tilesPerRow - 1 && tileY === tilesPerColumn - 1))
        return -1;

      return tileY * tilesPerRow + tileX;
    }
    getTileTransformAt(layer, x, y) {
      let tileSet = player.getOuterAsset(this.__inner.data.tileSetId);
      let tilesPerRow = tileSet.__inner.data.texture.image.width / tileSet.__inner.data.grid.width;
      let transform = this.__inner.getTileAt(layer, x, y);
      return { "flipX": transform[2], "flipY": transform[3], "angle": transform[4] };
    }
  }
}
