interface BoxOptions {
  movable: boolean;
  width: number;
  height: number;
  offset?: { x: number; y: number; };
  bounce?: { x: number; y: number; };
}

interface TileMapOptions {
  tileMapAsset: Sup.TileMap;
  tileSetPropertyName?: string;
  layersIndex?: string;
}

declare namespace Sup {
  namespace ArcadePhysics2D {
    enum BodyType { Box, TileMap }

    class Body extends ActorComponent {
      constructor(actor: Sup.Actor, type: BodyType, options: BoxOptions|TileMapOptions);

      setEnabled(enabled: boolean): Body;
      getEnabled(): boolean;
      setMovable(movable: boolean): Body;
      getMovable(): boolean;

      setCustomGravity(gravity: Sup.Math.XY): Body;
      setCustomGravity(x: number, y: number): Body;
      setCustomGravityX(x: number): Body;
      setCustomGravityY(y: number): Body;
      getCustomGravity(): Sup.Math.Vector2;
      getCustomGravityX(): number;
      getCustomGravityY(): number;

      setSize(width: number, height: number): Body;
      getSize(): { width: number; height: number; };
      setOffset(offset: { x: number; y: number; }): Body;
      getOffset(): Sup.Math.Vector2;

      warpPosition(position: Sup.Math.XY): Body;
      warpPosition(x: number, y: number): Body;

      setVelocity(velocity: Sup.Math.XY): Body;
      setVelocity(x: number, y: number): Body;
      setVelocityX(x: number): Body;
      setVelocityY(y: number): Body;
      getVelocity(): Sup.Math.Vector2;
      getVelocityX(): number;
      getVelocityY(): number;
      addVelocity(velocity: Sup.Math.XY): Body;
      addVelocity(x: number, y: number): Body;
      addVelocityX(x: number): Body;
      addVelocityY(y: number): Body;

      setVelocityMin(velocityMin: Sup.Math.XY): Body;
      setVelocityMin(x: number, y: number): Body;
      getVelocityMin(): Sup.Math.Vector2;
      setVelocityMax(velocityMax: Sup.Math.XY): Body;
      setVelocityMax(x: number, y: number): Body;
      getVelocityMax(): Sup.Math.Vector2;
      setVelocityMultiplier(velocityMultiplier: Sup.Math.XY): Body;
      setVelocityMultiplier(x: number, y: number): Body;
      getVelocityMultiplier(): Sup.Math.Vector2;

      getTouches(): { top: boolean; bottom: boolean; right: boolean; left: boolean; };
    }
  }
}
